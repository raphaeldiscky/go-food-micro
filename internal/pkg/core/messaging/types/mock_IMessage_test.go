// Code generated by mockery v2.30.16. DO NOT EDIT.

package types

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockIMessage is an autogenerated mock type for the IMessage type
type MockIMessage struct {
	mock.Mock
}

// MockIMessage_Expecter is a struct that represents a mock IMessage expecter.
type MockIMessage_Expecter struct {
	mock *mock.Mock
}

// EXPECT is a function that returns a mock IMessage expecter.
func (_m *MockIMessage) EXPECT() *MockIMessage_Expecter {
	return &MockIMessage_Expecter{mock: &_m.Mock}
}

// GeMessageId is a function that returns the message id.
func (_m *MockIMessage) GeMessageId() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockIMessage_GeMessageId_Call is a struct that represents a mock IMessage ge message id call.
type MockIMessage_GeMessageId_Call struct {
	*mock.Call
}

// GeMessageId is a function that returns a mock IMessage ge message id call.
func (_e *MockIMessage_Expecter) GeMessageId() *MockIMessage_GeMessageId_Call {
	return &MockIMessage_GeMessageId_Call{Call: _e.mock.On("GeMessageId")}
}

// Run is a function that runs the mock IMessage ge message id call.
func (_c *MockIMessage_GeMessageId_Call) Run(run func()) *MockIMessage_GeMessageId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

// Return is a function that returns the mock IMessage ge message id call.
func (_c *MockIMessage_GeMessageId_Call) Return(_a0 string) *MockIMessage_GeMessageId_Call {
	_c.Call.Return(_a0)
	return _c
}

// RunAndReturn is a function that runs and returns the mock IMessage ge message id call.
func (_c *MockIMessage_GeMessageId_Call) RunAndReturn(run func() string) *MockIMessage_GeMessageId_Call {
	_c.Call.Return(run)
	return _c
}

// GetCreated is a function that returns the created time.
func (_m *MockIMessage) GetCreated() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// MockIMessage_GetCreated_Call is a struct that represents a mock IMessage get created call.
type MockIMessage_GetCreated_Call struct {
	*mock.Call
}

// GetCreated is a function that returns a mock IMessage get created call.
func (_e *MockIMessage_Expecter) GetCreated() *MockIMessage_GetCreated_Call {
	return &MockIMessage_GetCreated_Call{Call: _e.mock.On("GetCreated")}
}

// Run is a function that runs the mock IMessage get created call.
func (_c *MockIMessage_GetCreated_Call) Run(run func()) *MockIMessage_GetCreated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

// Return is a function that returns the mock IMessage get created call.
func (_c *MockIMessage_GetCreated_Call) Return(_a0 time.Time) *MockIMessage_GetCreated_Call {
	_c.Call.Return(_a0)
	return _c
}

// RunAndReturn is a function that runs and returns the mock IMessage get created call.
func (_c *MockIMessage_GetCreated_Call) RunAndReturn(run func() time.Time) *MockIMessage_GetCreated_Call {
	_c.Call.Return(run)
	return _c
}

// GetEventTypeName is a function that returns the event type name.
func (_m *MockIMessage) GetMessageTypeName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockIMessage_GetEventTypeName_Call is a struct that represents a mock IMessage get event type name call.
type MockIMessage_GetEventTypeName_Call struct {
	*mock.Call
}

// GetEventTypeName is a function that returns a mock IMessage get event type name call.
func (_e *MockIMessage_Expecter) GetEventTypeName() *MockIMessage_GetEventTypeName_Call {
	return &MockIMessage_GetEventTypeName_Call{Call: _e.mock.On("GetMessageTypeName")}
}

// Run is a function that runs the mock IMessage get event type name call.
func (_c *MockIMessage_GetEventTypeName_Call) Run(run func()) *MockIMessage_GetEventTypeName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

// Return is a function that returns the mock IMessage get event type name call.
func (_c *MockIMessage_GetEventTypeName_Call) Return(_a0 string) *MockIMessage_GetEventTypeName_Call {
	_c.Call.Return(_a0)
	return _c
}

// RunAndReturn is a function that runs and returns the mock IMessage get event type name call.
func (_c *MockIMessage_GetEventTypeName_Call) RunAndReturn(run func() string) *MockIMessage_GetEventTypeName_Call {
	_c.Call.Return(run)
	return _c
}

// IsMessage is a function that returns the message.
func (_m *MockIMessage) IsMessage() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockIMessage_IsMessage_Call is a struct that represents a mock IMessage is message call.
type MockIMessage_IsMessage_Call struct {
	*mock.Call
}

// IsMessage is a function that returns a mock IMessage is message call.
func (_e *MockIMessage_Expecter) IsMessage() *MockIMessage_IsMessage_Call {
	return &MockIMessage_IsMessage_Call{Call: _e.mock.On("IsMessage")}
}

// Run is a function that runs the mock IMessage is message call.
func (_c *MockIMessage_IsMessage_Call) Run(run func()) *MockIMessage_IsMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

// Return is a function that returns the mock IMessage is message call.
func (_c *MockIMessage_IsMessage_Call) Return(_a0 bool) *MockIMessage_IsMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

// RunAndReturn is a function that runs and returns the mock IMessage is message call.
func (_c *MockIMessage_IsMessage_Call) RunAndReturn(run func() bool) *MockIMessage_IsMessage_Call {
	_c.Call.Return(run)
	return _c
}

// SetEventTypeName is a function that sets the event type name.
func (_m *MockIMessage) SetEventTypeName(_a0 string) {
	_m.Called(_a0)
}

// MockIMessage_SetEventTypeName_Call is a struct that represents a mock IMessage set event type name call.
type MockIMessage_SetEventTypeName_Call struct {
	*mock.Call
}

// SetEventTypeName is a function that returns a mock IMessage set event type name call.
//   - _a0 string
func (_e *MockIMessage_Expecter) SetEventTypeName(_a0 interface{}) *MockIMessage_SetEventTypeName_Call {
	return &MockIMessage_SetEventTypeName_Call{Call: _e.mock.On("SetEventTypeName", _a0)}
}

// Run is a function that runs the mock IMessage set event type name call.
func (_c *MockIMessage_SetEventTypeName_Call) Run(run func(_a0 string)) *MockIMessage_SetEventTypeName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

// Return is a function that returns the mock IMessage set event type name call.
func (_c *MockIMessage_SetEventTypeName_Call) Return() *MockIMessage_SetEventTypeName_Call {
	_c.Call.Return()
	return _c
}

// RunAndReturn is a function that runs and returns the mock IMessage set event type name call.
func (_c *MockIMessage_SetEventTypeName_Call) RunAndReturn(run func(string)) *MockIMessage_SetEventTypeName_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIMessage is a function that creates a new instance of MockIMessage.
func NewMockIMessage(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockIMessage {
	mock := &MockIMessage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
