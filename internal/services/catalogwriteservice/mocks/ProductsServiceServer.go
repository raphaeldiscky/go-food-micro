// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	products_service "github.com/raphaeldiscky/go-food-micro/internal/services/catalogwriteservice/internal/shared/grpc/genproto"
	mock "github.com/stretchr/testify/mock"
)

// ProductsServiceServer is an autogenerated mock type for the ProductsServiceServer type
type ProductsServiceServer struct {
	mock.Mock
}

type ProductsServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *ProductsServiceServer) EXPECT() *ProductsServiceServer_Expecter {
	return &ProductsServiceServer_Expecter{mock: &_m.Mock}
}

// CreateProduct provides a mock function with given fields: _a0, _a1
func (_m *ProductsServiceServer) CreateProduct(_a0 context.Context, _a1 *products_service.CreateProductReq) (*products_service.CreateProductRes, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 *products_service.CreateProductRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *products_service.CreateProductReq) (*products_service.CreateProductRes, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *products_service.CreateProductReq) *products_service.CreateProductRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products_service.CreateProductRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *products_service.CreateProductReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductsServiceServer_CreateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProduct'
type ProductsServiceServer_CreateProduct_Call struct {
	*mock.Call
}

// CreateProduct is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *products_service.CreateProductReq
func (_e *ProductsServiceServer_Expecter) CreateProduct(_a0 interface{}, _a1 interface{}) *ProductsServiceServer_CreateProduct_Call {
	return &ProductsServiceServer_CreateProduct_Call{Call: _e.mock.On("CreateProduct", _a0, _a1)}
}

func (_c *ProductsServiceServer_CreateProduct_Call) Run(run func(_a0 context.Context, _a1 *products_service.CreateProductReq)) *ProductsServiceServer_CreateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*products_service.CreateProductReq))
	})
	return _c
}

func (_c *ProductsServiceServer_CreateProduct_Call) Return(_a0 *products_service.CreateProductRes, _a1 error) *ProductsServiceServer_CreateProduct_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductsServiceServer_CreateProduct_Call) RunAndReturn(run func(context.Context, *products_service.CreateProductReq) (*products_service.CreateProductRes, error)) *ProductsServiceServer_CreateProduct_Call {
	_c.Call.Return(run)
	return _c
}

// GetProductByID provides a mock function with given fields: _a0, _a1
func (_m *ProductsServiceServer) GetProductByID(_a0 context.Context, _a1 *products_service.GetProductByIDReq) (*products_service.GetProductByIDRes, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetProductByID")
	}

	var r0 *products_service.GetProductByIDRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *products_service.GetProductByIDReq) (*products_service.GetProductByIDRes, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *products_service.GetProductByIDReq) *products_service.GetProductByIDRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products_service.GetProductByIDRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *products_service.GetProductByIDReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductsServiceServer_GetProductByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProductByID'
type ProductsServiceServer_GetProductByID_Call struct {
	*mock.Call
}

// GetProductByID is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *products_service.GetProductByIDReq
func (_e *ProductsServiceServer_Expecter) GetProductByID(_a0 interface{}, _a1 interface{}) *ProductsServiceServer_GetProductByID_Call {
	return &ProductsServiceServer_GetProductByID_Call{Call: _e.mock.On("GetProductByID", _a0, _a1)}
}

func (_c *ProductsServiceServer_GetProductByID_Call) Run(run func(_a0 context.Context, _a1 *products_service.GetProductByIDReq)) *ProductsServiceServer_GetProductByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*products_service.GetProductByIDReq))
	})
	return _c
}

func (_c *ProductsServiceServer_GetProductByID_Call) Return(_a0 *products_service.GetProductByIDRes, _a1 error) *ProductsServiceServer_GetProductByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductsServiceServer_GetProductByID_Call) RunAndReturn(run func(context.Context, *products_service.GetProductByIDReq) (*products_service.GetProductByIDRes, error)) *ProductsServiceServer_GetProductByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProduct provides a mock function with given fields: _a0, _a1
func (_m *ProductsServiceServer) UpdateProduct(_a0 context.Context, _a1 *products_service.UpdateProductReq) (*products_service.UpdateProductRes, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProduct")
	}

	var r0 *products_service.UpdateProductRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *products_service.UpdateProductReq) (*products_service.UpdateProductRes, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *products_service.UpdateProductReq) *products_service.UpdateProductRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products_service.UpdateProductRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *products_service.UpdateProductReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductsServiceServer_UpdateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProduct'
type ProductsServiceServer_UpdateProduct_Call struct {
	*mock.Call
}

// UpdateProduct is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *products_service.UpdateProductReq
func (_e *ProductsServiceServer_Expecter) UpdateProduct(_a0 interface{}, _a1 interface{}) *ProductsServiceServer_UpdateProduct_Call {
	return &ProductsServiceServer_UpdateProduct_Call{Call: _e.mock.On("UpdateProduct", _a0, _a1)}
}

func (_c *ProductsServiceServer_UpdateProduct_Call) Run(run func(_a0 context.Context, _a1 *products_service.UpdateProductReq)) *ProductsServiceServer_UpdateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*products_service.UpdateProductReq))
	})
	return _c
}

func (_c *ProductsServiceServer_UpdateProduct_Call) Return(_a0 *products_service.UpdateProductRes, _a1 error) *ProductsServiceServer_UpdateProduct_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductsServiceServer_UpdateProduct_Call) RunAndReturn(run func(context.Context, *products_service.UpdateProductReq) (*products_service.UpdateProductRes, error)) *ProductsServiceServer_UpdateProduct_Call {
	_c.Call.Return(run)
	return _c
}

// NewProductsServiceServer creates a new instance of ProductsServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductsServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductsServiceServer {
	mock := &ProductsServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
