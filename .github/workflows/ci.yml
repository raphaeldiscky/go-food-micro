name: CI

on:
  push:
    branches: ["main"]
    paths-ignore: ["*.md", "docs", "deploy", "config", ".github", "scripts"]
  pull_request:
    branches: ["main"]
    paths-ignore: ["*.md", "docs", "deploy", "config", ".github", "scripts"]

env:
  GO_VERSION: "1.23.6"

jobs:
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
          cache: true

      - name: Cache Tools
        id: cache-tools
        uses: actions/cache@v4
        with:
          path: |
            ~/go/bin
            .task
          key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-tools-${{ hashFiles('**/go.sum', 'Taskfile.yml') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-tools-

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.REPO_TOKEN }}

      - name: Install Tools
        if: steps.cache-tools.outputs.cache-hit != 'true'
        run: |
          # Install linting tools
          go install github.com/mgechev/revive@latest
          go install honnef.co/go/tools/cmd/staticcheck@latest
          go install github.com/kisielk/errcheck@latest
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/HEAD/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.1.6

          # Verify tools are installed
          echo "Verifying tools installation..."
          revive --version
          staticcheck --version
          errcheck --version
          golangci-lint --version

      - name: Cache Dependencies
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-deps-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-deps-

      - name: Install Dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: task install_deps

      - name: Upload Tools Cache
        uses: actions/upload-artifact@v4
        with:
          name: go-tools
          path: |
            ~/go/bin
            .task
          retention-days: 1

      - name: Upload Dependencies Cache
        uses: actions/upload-artifact@v4
        with:
          name: go-deps
          path: ~/go/pkg/mod
          retention-days: 1

  format-lint:
    name: Format and Lint (${{ matrix.service }})
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service: [pkg, catalogwriteservice, catalogreadservice, orderservice]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
          cache: true

      - name: Download Tools Cache
        uses: actions/download-artifact@v4
        with:
          name: go-tools
          path: ~/go

      - name: Download Dependencies Cache
        uses: actions/download-artifact@v4
        with:
          name: go-deps
          path: ~/go/pkg/mod

      - name: Format and Lint
        run: |
          export PATH="$(go env GOPATH)/bin:$PATH"
          task format SERVICE=${{ matrix.service }}

  test:
    name: Test (${{ matrix.type }})
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - type: unit
            command: task unit_test
            enabled: true
          - type: integration
            command: task integration_test
            enabled: false
          - type: e2e
            command: task e2e_test
            enabled: false

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
          cache: true

      - name: Download Tools Cache
        uses: actions/download-artifact@v4
        with:
          name: go-tools
          path: ~/go

      - name: Download Dependencies Cache
        uses: actions/download-artifact@v4
        with:
          name: go-deps
          path: ~/go/pkg/mod

      - name: Run Tests
        if: matrix.enabled
        run: ${{ matrix.command }}

      - name: Skip Tests (Not Implemented)
        if: ${{ !matrix.enabled }}
        run: echo "‚è≠Ô∏è ${{ matrix.type }} tests are not yet implemented"

  build:
    name: Build
    needs: [format-lint, test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
          cache: true

      - name: Download Tools Cache
        uses: actions/download-artifact@v4
        with:
          name: go-tools
          path: ~/go

      - name: Download Dependencies Cache
        uses: actions/download-artifact@v4
        with:
          name: go-deps
          path: ~/go/pkg/mod

      - name: Build
        run: task build

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [build, test]

    steps:
      - name: Check Results
        run: |
          build_result="${{ needs.build.result }}"
          test_result="${{ needs.test.result }}"

          echo "## üìä CI Results"
          echo "| Job | Status |"
          echo "|-----|--------|"
          echo "| Build & Lint | $([ "$build_result" == "success" ] && echo "‚úÖ Passed" || echo "‚ùå Failed") |"
          echo "| Tests | $([ "$test_result" == "success" ] && echo "‚úÖ Passed" || echo "‚ùå Failed") |"

          if [[ "$build_result" == "success" && "$test_result" == "success" ]]; then
            echo ""
            echo "üéâ **All checks passed!**"
            exit 0
          else
            echo ""
            echo "üí• **Some checks failed**"
            exit 1
          fi
