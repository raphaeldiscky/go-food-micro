name: CI

on:
  push:
    branches: ["main"]
    paths-ignore:
      - "*.md"
      - "docs"
      - "deploy"
      - "config"
      - ".github"
      - "scripts"
  pull_request:
    branches: ["main"]
    paths-ignore:
      - "*.md"
      - "docs"
      - "deploy"
      - "config"
      - ".github"
      - "scripts"

# Add concurrency to cancel in-progress runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GO_VERSION: "1.23.6"

jobs:
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    outputs:
      go-cache-key: ${{ steps.go-cache-paths.outputs.go-cache-key }}
      go-mod-cache-key: ${{ steps.go-cache-paths.outputs.go-mod-cache-key }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
          cache: false # We'll handle caching manually for better control

      - name: Get Go cache paths
        id: go-cache-paths
        run: |
          echo "go-build=$(go env GOCACHE)" >> $GITHUB_OUTPUT
          echo "go-mod=$(go env GOMODCACHE)" >> $GITHUB_OUTPUT
          echo "go-cache-key=${{ runner.os }}-go-${{ env.GO_VERSION }}-build-${{ hashFiles('**/go.sum') }}" >> $GITHUB_OUTPUT
          echo "go-mod-cache-key=${{ runner.os }}-go-${{ env.GO_VERSION }}-mod-${{ hashFiles('**/go.sum') }}" >> $GITHUB_OUTPUT

      - name: Cache Go Build
        uses: actions/cache@v4
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ steps.go-cache-paths.outputs.go-cache-key }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-build-

      - name: Cache Go Modules
        uses: actions/cache@v4
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ steps.go-cache-paths.outputs.go-mod-cache-key }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-mod-

      - name: Cache Tools
        uses: actions/cache@v4
        with:
          path: |
            ~/go/bin
            ~/.cache/go-build
          key: ${{ runner.os }}-go-tools-${{ env.GO_VERSION }}-${{ hashFiles('Taskfile.yml') }}
          restore-keys: |
            ${{ runner.os }}-go-tools-${{ env.GO_VERSION }}-

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.REPO_TOKEN }}

      - name: Install Dependencies
        run: task install_deps

      - name: Install Tools
        run: |
          # Check if tools are already installed (from cache)
          if ! command -v golangci-lint &> /dev/null || \
             ! command -v revive &> /dev/null || \
             ! command -v staticcheck &> /dev/null || \
             ! command -v errcheck &> /dev/null; then
            echo "Installing missing tools..."
            
            # Install linting and static analysis tools
            curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/HEAD/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.1.6
            go install github.com/mgechev/revive@latest
            go install honnef.co/go/tools/cmd/staticcheck@latest
            go install github.com/kisielk/errcheck@latest
          else
            echo "Tools already installed from cache"
          fi

          # Verify installations
          echo "Verifying tools installation..."
          revive --version
          staticcheck --version
          errcheck -help | head -n 1
          golangci-lint --version
          task --version

  format-lint:
    name: Format and Lint (${{ matrix.service }})
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service: [pkg, catalogwriteservice, catalogreadservice, orderservice]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
          cache: false

      - name: Get Go cache paths
        id: go-cache-paths
        run: |
          echo "go-build=$(go env GOCACHE)" >> $GITHUB_OUTPUT
          echo "go-mod=$(go env GOMODCACHE)" >> $GITHUB_OUTPUT

      - name: Cache Go Build
        uses: actions/cache@v4
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ needs.setup.outputs.go-cache-key }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-build-

      - name: Cache Go Modules
        uses: actions/cache@v4
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ needs.setup.outputs.go-mod-cache-key }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-mod-

      - name: Cache Tools
        uses: actions/cache@v4
        with:
          path: |
            ~/go/bin
            ~/.cache/go-build
          key: ${{ runner.os }}-go-tools-${{ env.GO_VERSION }}-${{ hashFiles('Taskfile.yml') }}
          restore-keys: |
            ${{ runner.os }}-go-tools-${{ env.GO_VERSION }}-

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.REPO_TOKEN }}

      - name: Format and Lint (${{ matrix.service }})
        run: |
          export PATH="$(go env GOPATH)/bin:$PATH"
          task format SERVICE=${{ matrix.service }}

  unit-test:
    name: Unit Test (${{ matrix.service }})
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service: [catalogwriteservice, catalogreadservice, orderservice]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
          cache: false

      - name: Get Go cache paths
        id: go-cache-paths
        run: |
          echo "go-build=$(go env GOCACHE)" >> $GITHUB_OUTPUT
          echo "go-mod=$(go env GOMODCACHE)" >> $GITHUB_OUTPUT

      - name: Cache Go Build
        uses: actions/cache@v4
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ needs.setup.outputs.go-cache-key }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-build-

      - name: Cache Go Modules
        uses: actions/cache@v4
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ needs.setup.outputs.go-mod-cache-key }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-mod-

      - name: Cache Tools
        uses: actions/cache@v4
        with:
          path: |
            ~/go/bin
            ~/.cache/go-build
          key: ${{ runner.os }}-go-tools-${{ env.GO_VERSION }}-${{ hashFiles('Taskfile.yml') }}
          restore-keys: |
            ${{ runner.os }}-go-tools-${{ env.GO_VERSION }}-

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.REPO_TOKEN }}

      - name: Run Unit Tests (${{ matrix.service }})
        run: task unit_test SERVICE=${{ matrix.service }}

  integration-test:
    name: Integration Test (${{ matrix.service }})
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service: [catalogwriteservice]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
          cache: false

      - name: Get Go cache paths
        id: go-cache-paths
        run: |
          echo "go-build=$(go env GOCACHE)" >> $GITHUB_OUTPUT
          echo "go-mod=$(go env GOMODCACHE)" >> $GITHUB_OUTPUT

      - name: Cache Go Build
        uses: actions/cache@v4
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ needs.setup.outputs.go-cache-key }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-build-

      - name: Cache Go Modules
        uses: actions/cache@v4
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ needs.setup.outputs.go-mod-cache-key }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-mod-

      - name: Cache Tools
        uses: actions/cache@v4
        with:
          path: |
            ~/go/bin
            ~/.cache/go-build
          key: ${{ runner.os }}-go-tools-${{ env.GO_VERSION }}-${{ hashFiles('Taskfile.yml') }}
          restore-keys: |
            ${{ runner.os }}-go-tools-${{ env.GO_VERSION }}-

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.REPO_TOKEN }}

      - name: Run Integration Tests (${{ matrix.service }})
        run: task integration_test SERVICE=${{ matrix.service }}

  e2e-test:
    name: E2E Test (${{ matrix.service }})
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service: [catalogwriteservice]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
          cache: false

      - name: Get Go cache paths
        id: go-cache-paths
        run: |
          echo "go-build=$(go env GOCACHE)" >> $GITHUB_OUTPUT
          echo "go-mod=$(go env GOMODCACHE)" >> $GITHUB_OUTPUT

      - name: Cache Go Build
        uses: actions/cache@v4
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ needs.setup.outputs.go-cache-key }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-build-

      - name: Cache Go Modules
        uses: actions/cache@v4
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ needs.setup.outputs.go-mod-cache-key }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-mod-

      - name: Cache Tools
        uses: actions/cache@v4
        with:
          path: |
            ~/go/bin
            ~/.cache/go-build
          key: ${{ runner.os }}-go-tools-${{ env.GO_VERSION }}-${{ hashFiles('Taskfile.yml') }}
          restore-keys: |
            ${{ runner.os }}-go-tools-${{ env.GO_VERSION }}-

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.REPO_TOKEN }}

      - name: Run E2E Tests (${{ matrix.service }})
        run: task e2e_test SERVICE=${{ matrix.service }}

  build:
    name: Build
    needs: [setup, format-lint, unit-test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
          cache: false

      - name: Get Go cache paths
        id: go-cache-paths
        run: |
          echo "go-build=$(go env GOCACHE)" >> $GITHUB_OUTPUT
          echo "go-mod=$(go env GOMODCACHE)" >> $GITHUB_OUTPUT

      - name: Cache Go Build
        uses: actions/cache@v4
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ needs.setup.outputs.go-cache-key }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-build-

      - name: Cache Go Modules
        uses: actions/cache@v4
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ needs.setup.outputs.go-mod-cache-key }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-mod-

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.REPO_TOKEN }}

      - name: Build
        run: task build

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [build, unit-test, integration-test, e2e-test]
    steps:
      - name: Check Results
        run: |
          build_result="${{ needs.build.result }}"
          unit_test_result="${{ needs.unit-test.result }}"
          integration_test_result="${{ needs.integration-test.result }}"
          e2e_test_result="${{ needs.e2e-test.result }}"

          echo "## 📊 CI Results"
          echo "| Job               | Status          |"
          echo "|-------------------|-----------------|"
          echo "| Build & Lint      | $([ "$build_result" == "success" ] && echo "✅ Passed" || echo "❌ Failed") |"
          echo "| Unit Tests        | $([ "$unit_test_result" == "success" ] && echo "✅ Passed" || echo "❌ Failed") |"
          echo "| Integration Tests | $([ "$integration_test_result" == "success" ] && echo "✅ Passed" || echo "❌ Failed") |"
          echo "| E2E Tests         | $([ "$e2e_test_result" == "success" ] && echo "✅ Passed" || echo "❌ Failed") |"

          if [[ "$build_result" == "success" && "$unit_test_result" == "success" ]]; then
            echo -e "\n🎉 **All critical checks passed!**"
            exit 0
          else
            echo -e "\n💥 **Some critical checks failed**"
            exit 1
          fi
