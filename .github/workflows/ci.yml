name: CI

on:
  push:
    branches: ["main"]
    paths-ignore: ["*.md", "docs", "deploy", "config", ".github", "scripts"]
  pull_request:
    branches: ["main"]
    paths-ignore: ["*.md", "docs", "deploy", "config", ".github", "scripts"]

env:
  GO_VERSION: "1.23.6"

jobs:
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go ${{ env.GO_VERSION }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true

      # ─────────────────────────────────────────────────────────────────────────────
      # Cache Go modules (GOPATH/pkg/mod)
      - name: Cache Go modules
        uses: actions/cache@v4
        id: cache-modules
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-mods-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-mods-

      # ─────────────────────────────────────────────────────────────────────────────
      # Cache tool binaries (GOPATH/bin + Taskfile)
      - name: Cache Go tools & Taskfile
        uses: actions/cache@v4
        id: cache-tools
        with:
          path: |
            ~/go/bin
            ~/.task
          key: ${{ runner.os }}-go-tools-${{ hashFiles('**/go.sum', 'Taskfile.yml') }}
          restore-keys: |
            ${{ runner.os }}-go-tools-

      # ─────────────────────────────────────────────────────────────────────────────
      # Install Arduino Task (taskfile tool) into ~/.task/bin
      - name: Install Taskfile CLI
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.REPO_TOKEN }}

      # ─────────────────────────────────────────────────────────────────────────────
      # If tools cache was a MISS, install linters & staticcheck/errcheck/etc.
      - name: Install linting tools (golangci-lint, revive, staticcheck, errcheck)
        if: steps.cache-tools.outputs.cache-hit != 'true'
        shell: bash
        run: |
          export PATH="$(go env GOPATH)/bin:$HOME/.task/bin:$PATH"
          echo "🔧 Installing golangci-lint..."
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/HEAD/install.sh | sh -s -- -b "$(go env GOPATH)/bin" v2.1.6
          echo "🔧 Installing revive, staticcheck, errcheck..."
          go install github.com/mgechev/revive@latest
          go install honnef.co/go/tools/cmd/staticcheck@latest
          go install github.com/kisielk/errcheck@latest

      # ─────────────────────────────────────────────────────────────────────────────
      # Verify that tools are installed (optional, but helpful)
      - name: Verify linting tools
        shell: bash
        run: |
          export PATH="$(go env GOPATH)/bin:$HOME/.task/bin:$PATH"
          revive --version
          staticcheck --version
          errcheck -help | head -n1
          golangci-lint --version
          task --version

      # ─────────────────────────────────────────────────────────────────────────────
      # Install Go dependencies via Taskfile (only if modules-cache was a MISS)
      - name: Install Go dependencies
        if: steps.cache-modules.outputs.cache-hit != 'true'
        shell: bash
        run: |
          export PATH="$(go env GOPATH)/bin:$HOME/.task/bin:$PATH"
          task install_deps

  format-lint:
    name: Format & Lint (service=${{ matrix.service }})
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service: [pkg, catalogwriteservice, catalogreadservice, orderservice]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go ${{ env.GO_VERSION }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true

      - name: Restore Go modules & tools cache
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
            ~/go/bin
            ~/.task
          key: ${{ runner.os }}-go-allcache-${{ hashFiles('**/go.sum', 'Taskfile.yml') }}
          restore-keys: |
            ${{ runner.os }}-go-allcache-

      - name: Run format & lint
        shell: bash
        run: |
          export PATH="$(go env GOPATH)/bin:$HOME/.task/bin:$PATH"
          task format SERVICE=${{ matrix.service }}

  test:
    name: Tests (type=${{ matrix.type }})
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - type: unit
            command: task unit_test
            enabled: true
          - type: integration
            command: task integration_test
            enabled: false
          - type: e2e
            command: task e2e_test
            enabled: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go ${{ env.GO_VERSION }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true

      - name: Restore Go modules & tools cache
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
            ~/go/bin
            ~/.task
          key: ${{ runner.os }}-go-allcache-${{ hashFiles('**/go.sum', 'Taskfile.yml') }}
          restore-keys: |
            ${{ runner.os }}-go-allcache-

      - name: Run Tests
        if: matrix.enabled
        shell: bash
        run: |
          export PATH="$(go env GOPATH)/bin:$HOME/.task/bin:$PATH"
          ${{ matrix.command }}

      - name: Skip Tests (Not Implemented)
        if: ${{ !matrix.enabled }}
        run: echo "⏭️ ${{ matrix.type }} tests are not yet implemented"

  build:
    name: Build
    needs: [format-lint, test]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go ${{ env.GO_VERSION }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true

      - name: Restore Go modules & tools cache
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
            ~/go/bin
            ~/.task
          key: ${{ runner.os }}-go-allcache-${{ hashFiles('**/go.sum', 'Taskfile.yml') }}
          restore-keys: |
            ${{ runner.os }}-go-allcache-

      - name: Run Build
        shell: bash
        run: |
          export PATH="$(go env GOPATH)/bin:$HOME/.task/bin:$PATH"
          task build

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [build, test]

    steps:
      - name: Print CI Results
        shell: bash
        run: |
          build_result="${{ needs.build.result }}"
          test_result="${{ needs.test.result }}"

          echo "## 📊 CI Results"
          echo "| Job    | Status |"
          echo "|--------|--------|"
          echo "| Build  | $([ \"$build_result\" == \"success\" ] && echo \"✅ Passed\" || echo \"❌ Failed\") |"
          echo "| Tests  | $([ \"$test_result\" == \"success\" ] && echo \"✅ Passed\" || echo \"❌ Failed\") |"

          if [[ \"$build_result\" == \"success\" && \"$test_result\" == \"success\" ]]; then
            echo ""
            echo "🎉 **All checks passed!**"
            exit 0
          else
            echo ""
            echo "💥 **Some checks failed**"
            exit 1
          fi
