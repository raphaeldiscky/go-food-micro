name: CI

on:
  push:
    branches: ["main"]
    paths-ignore: ["*.md", "docs", "deploy", "config", ".github", "scripts"]
  pull_request:
    branches: ["main"]
    paths-ignore: ["*.md", "docs", "deploy", "config", ".github", "scripts"]

env:
  GO_VERSION: "1.23.6"

jobs:
  build:
    name: Build, Format, and Lint
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache.outputs.cache-hit }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
          cache: true

      - name: Cache Dependencies
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/go/bin
            .task
          key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum', 'Taskfile.yml') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-
            ${{ runner.os }}-go-

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.REPO_TOKEN }}

      - name: Setup Tools and Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          # Install linting tools in parallel
          {
            curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/HEAD/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.1.6 &
            go install github.com/mgechev/revive@latest &
            go install honnef.co/go/tools/cmd/staticcheck@latest &
            go install github.com/kisielk/errcheck@latest &
            wait
          }
          # Install project dependencies
          task install_deps

      - name: Format and Lint
        run: task format

      - name: Build
        run: task build

  test:
    name: Test (${{ matrix.type }})
    runs-on: ubuntu-latest
    needs: build
    strategy:
      fail-fast: false
      matrix:
        include:
          - type: unit
            command: task unit_test
            enabled: true
          - type: integration
            command: task integration_test
            enabled: false
          - type: e2e
            command: task e2e_test
            enabled: false

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
          cache: true

      - name: Restore Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/go/bin
            .task
          key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum', 'Taskfile.yml') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-
            ${{ runner.os }}-go-

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.REPO_TOKEN }}

      - name: Run Tests
        if: matrix.enabled
        run: ${{ matrix.command }}

      - name: Skip Tests (Not Implemented)
        if: ${{ !matrix.enabled }}
        run: echo "‚è≠Ô∏è ${{ matrix.type }} tests are not yet implemented"

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [build, test]

    steps:
      - name: Check Results
        run: |
          build_result="${{ needs.build.result }}"
          test_result="${{ needs.test.result }}"

          echo "## üìä CI Results"
          echo "| Job | Status |"
          echo "|-----|--------|"
          echo "| Build & Lint | $([ "$build_result" == "success" ] && echo "‚úÖ Passed" || echo "‚ùå Failed") |"
          echo "| Tests | $([ "$test_result" == "success" ] && echo "‚úÖ Passed" || echo "‚ùå Failed") |"

          if [[ "$build_result" == "success" && "$test_result" == "success" ]]; then
            echo ""
            echo "üéâ **All checks passed!**"
            exit 0
          else
            echo ""
            echo "üí• **Some checks failed**"
            exit 1
          fi
