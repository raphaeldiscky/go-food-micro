#https://taskfile.dev/#/installation
#https://github.com/go-task/task/issues/1115
version: "3"

vars:
  GOOS: "{{default OS .GOOS}}"
  DC_DIR: "deployments/docker-compose"
  INFRA_DC_FILE: "{{.DC_DIR}}/infra.yaml"
  MONITORING_DC_FILE: "{{.DC_DIR}}/monitoring.yaml"
  SLEEP_CMD: '{{if eq .GOOS "windows"}}timeout{{else}}sleep{{end}}'

tasks:
  ci:
    desc: Run CI pipeline locally
    cmds:
      - act -n

  install_tools:
    desc: Install necessary tools
    cmds:
      - chmod +x ./scripts/install-tools.sh
      - ./scripts/install-tools.sh

  install_dependencies:
    desc: Install project dependencies
    vars:
      SERVICE: '{{.SERVICE | default ""}}'
    cmds:
      - |
        if [ -z "{{.SERVICE}}" ]; then
          echo "Installing dependencies for all services..."
          sh ./scripts/install-dependencies.sh pkg
          sh ./scripts/install-dependencies.sh catalogwriteservice
          sh ./scripts/install-dependencies.sh catalogreadservice
          sh ./scripts/install-dependencies.sh orderservice
        else
          echo "Installing dependencies for {{.SERVICE}}..."
          sh ./scripts/install-dependencies.sh {{.SERVICE}}
        fi

  update_dependencies:
    desc: Update project dependencies
    cmds:
      - sh ./scripts/update-dependencies.sh pkg
      - sh ./scripts/update-dependencies.sh catalogwriteservice
      - sh ./scripts/update-dependencies.sh catalogreadservice
      - sh ./scripts/update-dependencies.sh orderservice

  safe_update_dependencies:
    desc: Safe update project dependencies
    cmds:
      - sh ./scripts/safe-update-dependencies.sh update

  check_dependencies:
    desc: Check project dependencies
    cmds:
      - sh ./scripts/check-dependencies.sh

  run:
    desc: Run a specific service with air
    vars:
      SERVICE: '{{.SERVICE | default "catalogwriteservice"}}'
    cmds:
      - sh ./scripts/run-with-air.sh {{.SERVICE}}

  sleep:
    vars:
      DURATION: "{{default 5 .DURATION}}"
    cmds:
      - "{{.SLEEP_CMD}} {{.DURATION}}"

  build:
    desc: Build project components
    cmds:
      - sh ./scripts/build.sh pkg
      - sh ./scripts/build.sh catalogwriteservice
      - sh ./scripts/build.sh catalogreadservice
      - sh ./scripts/build.sh orderservice

  start_infra:
    desc: Start infrastructure using docker-compose
    cmds:
      - docker compose -f {{.INFRA_DC_FILE}} up -d

  start_monitoring:
    desc: Start monitoring using docker-compose
    cmds:
      - docker compose -f {{.MONITORING_DC_FILE}} up -d

  stop_infra:
    desc: Stop infrastructure using docker-compose
    cmds:
      - docker compose -f {{.INFRA_DC_FILE}} stop
      - docker compose -f {{.INFRA_DC_FILE}} rm -f

  stop_monitoring:
    desc: Stop monitoring using docker-compose
    cmds:
      - docker compose -f {{.MONITORING_DC_FILE}} stop
      - docker compose -f {{.MONITORING_DC_FILE}} rm -f

  restart_infra:
    desc: Restart infrastructure using docker-compose
    cmds:
      - task: stop_infra
      - task: sleep
      - task: start_infra

  restart_monitoring:
    desc: Restart monitoring using docker-compose
    cmds:
      - task: stop_monitoring
      - task: sleep
      - task: start_monitoring

  test_file:
    desc: Run individual test file
    vars:
      FILE: "{{.FILE}}"
      TEST_TYPE: '{{default "unit" .TEST_TYPE}}'
    cmds:
      - sh ./scripts/test-file.sh {{.FILE}} {{.TEST_TYPE}}

  unit_test:
    desc: Run unit tests
    vars:
      SERVICE: '{{.SERVICE | default ""}}'
    cmds:
      - |
        if [ -z "{{.SERVICE}}" ]; then
          echo "üîç Running unit tests for all services..."
          for service in catalogwriteservice catalogreadservice orderservice; do
            echo "‚ñ∂Ô∏è Testing $service..."
            sh ./scripts/test.sh $service unit
          done
        else
          echo "‚ñ∂Ô∏è Running unit tests for {{.SERVICE}}..."
          sh ./scripts/test.sh {{.SERVICE}} unit
        fi

  integration_test:
    desc: Run integration tests
    vars:
      SERVICE: '{{.SERVICE | default ""}}'
    cmds:
      - |
        if [ -z "{{.SERVICE}}" ]; then
          echo "üîç Running integration tests for all services..."
          for service in catalogwriteservice catalogreadservice orderservice; do
            echo "üß™ Integration test: $service"
            sh ./scripts/test.sh $service integration
          done
        else
          echo "üß™ Integration test: {{.SERVICE}}"
          sh ./scripts/test.sh {{.SERVICE}} integration
        fi

  e2e_test:
    desc: Run end-to-end tests
    vars:
      SERVICE: '{{.SERVICE | default ""}}'
    cmds:
      - |
        if [ -z "{{.SERVICE}}" ]; then
          echo "üîç Running E2E tests for all services..."
          for service in catalogwriteservice catalogreadservice orderservice; do
            echo "üöÄ E2E test: $service"
            sh ./scripts/test.sh $service e2e
          done
        else
          echo "üöÄ E2E test: {{.SERVICE}}"
          sh ./scripts/test.sh {{.SERVICE}} e2e
        fi

  load_test:
    desc: Run load tests
    cmds:
      - sh ./scripts/test.sh catalogs_write load-test
      - sh ./scripts/test.sh catalogs_read load-test
      - sh ./scripts/test.sh orders load-test

  format:
    desc: Run formatters and linters
    vars:
      SERVICE: '{{.SERVICE | default ""}}'
    cmds:
      - |
        if [ -z "{{.SERVICE}}" ]; then
          echo "üîç Running formatters and linters for all services..."
          for service in catalogwriteservice catalogreadservice orderservice pkg; do
            echo "üßπ Formatting and linting $service..."
            sh ./scripts/format-lint.sh $service
          done
        else
          echo "üßπ Formatting and linting {{.SERVICE}}..."
          sh ./scripts/format-lint.sh {{.SERVICE}}
        fi

  lint:
    desc: Run formatters and linters
    cmds:
      - task: format

  go_migrate:
    desc: Run go migrate
    cmds:
      - sh ./scripts/go-migrate.sh -p ./internal/services/catalogwriteservice/db/migrations/go-migrate -c create -n create_product_table
      - sh ./scripts/go-migrate.sh -p ./internal/services/catalogwriteservice/db/migrations/go-migrate -c up -o postgres://postgres:postgres@localhost:5432/catalogs_write_service?sslmode=disable
      - sh ./scripts/go-migrate.sh -p ./internal/services/catalogwriteservice/db/migrations/go-migrate -c down -o postgres://postgres:postgres@localhost:5432/catalogs_write_service?sslmode=disable

  goose_migrate:
    desc: Run goose migrate
    cmds:
      - sh ./scripts/goose-migrate.sh -p ./internal/services/catalogwriteservice/db/migrations/goose-migrate -c create -n create_product_table
      - sh ./scripts/goose-migrate.sh -p ./internal/services/catalogwriteservice/db/migrations/goose-migrate -c up -o "user=postgres password=postgres dbname=catalogs_write_service sslmode=disable"
      - sh ./scripts/goose-migrate.sh -p ./internal/services/catalogwriteservice/db/migrations/goose-migrate -c down -o "user=postgres password=postgres dbname=catalogs_write_service sslmode=disable"

  atlas_migrate:
    desc: Run atlas migrate
    cmds:
      - sh ./scripts/atlas-migrate.sh -c gorm-sync -p "./internal/services/catalogwriteservice"
      - sh ./scripts/atlas-migrate.sh -c apply -p "./internal/services/catalogwriteservice" -o "postgres://postgres:postgres@localhost:5432/catalogs_write_service?sslmode=disable"

  cycle_check:
    desc: Check for import cycles
    cmds:
      - cd internal/pkg && goimportcycle -dot imports.dot dot -Tpng -o cycle/pkg.png imports.dot
      - cd internal/services/catalogwriteservice && goimportcycle -dot imports.dot dot -Tpng -o cycle/catalogwriteservice.png imports.dot
      - cd internal/services/catalogreadservice && goimportcycle -dot imports.dot dot -Tpng -o cycle/catalogreadservice.png imports.dot
      - cd internal/services/orderservice && goimportcycle -dot imports.dot dot -Tpng -o cycle/orderservice.png imports.dot

  pkg_mocks:
    desc: Generate package mocks
    cmds:
      - cd internal/pkg && mockery --config .mockery.yml

  services_mocks:
    desc: Generate service mocks
    cmds:
      - cd internal/services/catalogwriteservice && mockery --config .mockery.yml
      - cd internal/services/catalogreadservice && mockery --config .mockery.yml
      - cd internal/services/orderservice && mockery --config .mockery.yml

  generate_mocks:
    desc: Generate all mocks (packages and services)
    cmds:
      - task: pkg_mocks
      - task: services_mocks

  openapi:
    desc: Generate OpenAPI documentation
    cmds:
      - sh ./scripts/openapi.sh catalogwriteservice
      - sh ./scripts/openapi.sh catalogreadservice
      - sh ./scripts/openapi.sh orderservice

  proto:
    desc: Generate protobuf files
    cmds:
      - sh ./scripts/proto.sh catalogwriteservice
      - sh ./scripts/proto.sh orderservice
