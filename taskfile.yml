#https://taskfile.dev/#/installation
#https://github.com/go-task/task/issues/1115
version: "3"

vars:
  GOOS: "{{default OS .GOOS}}"
  DC_DIR: "deployments/docker-compose"
  INFRA_DC_FILE: "{{.DC_DIR}}/infra.yaml"
  MONITORING_DC_FILE: "{{.DC_DIR}}/monitoring.yaml"
  SLEEP_CMD: '{{if eq .GOOS "windows"}}timeout{{else}}sleep{{end}}'

tasks:
  install_tools:
    desc: Install necessary tools
    cmds:
      - chmod +x ./scripts/install-tools.sh
      - ./scripts/install-tools.sh

  run_catalogs_write_service:
    desc: Run catalog write service
    cmds:
      - sh ./scripts/run.sh catalogwriteservice

  run_catalog_read_service:
    desc: Run catalog read service
    cmds:
      - sh ./scripts/run.sh catalogreadservice

  run_order_service:
    desc: Run order service
    cmds:
      - sh ./scripts/run.sh orderservice

  sleep:
    vars:
      DURATION: "{{default 5 .DURATION}}"
    cmds:
      - "{{.SLEEP_CMD}} {{.DURATION}}"

  build:
    desc: Build project components
    cmds:
      - sh ./scripts/build.sh pkg
      - sh ./scripts/build.sh catalogwriteservice
      - sh ./scripts/build.sh catalogreadservice
      - sh ./scripts/build.sh orderservice

  install_dependencies:
    desc: Install project dependencies
    cmds:
      - sh ./scripts/install-dependencies.sh pkg
      - sh ./scripts/install-dependencies.sh catalogwriteservice
      - sh ./scripts/install-dependencies.sh catalogreadservice
      - sh ./scripts/install-dependencies.sh orderservice

  start_infra:
    desc: Start infrastructure using docker-compose
    cmds:
      - docker compose -f {{.INFRA_DC_FILE}} up -d

  start_monitoring:
    desc: Start monitoring using docker-compose
    cmds:
      - docker compose -f {{.MONITORING_DC_FILE}} up -d

  stop_infra:
    desc: Stop infrastructure using docker-compose
    cmds:
      - docker compose -f {{.INFRA_DC_FILE}} stop
      - docker compose -f {{.INFRA_DC_FILE}} rm -f

  stop_monitoring:
    desc: Stop monitoring using docker-compose
    cmds:
      - docker compose -f {{.MONITORING_DC_FILE}} stop
      - docker compose -f {{.MONITORING_DC_FILE}} rm -f

  restart_infra:
    desc: Restart infrastructure using docker-compose
    cmds:
      - task: stop_infra
      - task: sleep
      - task: start_infra

  restart_monitoring:
    desc: Restart monitoring using docker-compose
    cmds:
      - task: stop_monitoring
      - task: sleep
      - task: start_monitoring

  openapi:
    desc: Generate OpenAPI documentation
    cmds:
      - sh ./scripts/openapi.sh catalogwriteservice
      - sh ./scripts/openapi.sh catalogreadservice
      - sh ./scripts/openapi.sh orderservice

  proto:
    desc: Generate protobuf files
    cmds:
      - sh ./scripts/proto.sh catalogwriteservice
      - sh ./scripts/proto.sh orderservice

  unit_test:
    desc: Run unit tests
    cmds:
      - sh ./scripts/test.sh catalogwriteservice unit
      - sh ./scripts/test.sh catalogreadservice unit
      - sh ./scripts/test.sh orderservice unit

  integration_test:
    desc: Run integration tests
    cmds:
      - sh ./scripts/test.sh catalogwriteservice integration
      - sh ./scripts/test.sh catalogreadservice integration
      - sh ./scripts/test.sh orderservice integration

  e2e_test:
    desc: Run end-to-end tests
    cmds:
      - sh ./scripts/test.sh catalogwriteservice e2e
      - sh ./scripts/test.sh catalogreadservice e2e
      - sh ./scripts/test.sh orderservice e2e

  format:
    desc: Format codebase
    cmds:
      - sh ./scripts/format.sh catalogwriteservice
      - sh ./scripts/format.sh catalogreadservice
      - sh ./scripts/format.sh orderservice
      - sh ./scripts/format.sh pkg

  lint:
    desc: Run linters
    cmds:
      - sh ./scripts/lint.sh catalogwriteservice
      - sh ./scripts/lint.sh catalogreadservice
      - sh ./scripts/lint.sh orderservice
      - sh ./scripts/lint.sh pkg

  pkg_mocks:
    desc: Generate package mocks
    cmds:
      - cd internal/pkg/es && mockery --output mocks --all
      - cd internal/pkg/core/serializer && mockery --output mocks --all
      - cd internal/pkg/core/messaging && mockery --output mocks --all

  services_mocks:
    desc: Generate service mocks
    cmds:
      - cd internal/services/catalogwriteservice && mockery --output mocks --all
      - cd internal/services/catalogreadservice && mockery --output mocks --all
      - cd internal/services/orderservice && mockery --output mocks --all
