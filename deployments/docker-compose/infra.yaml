name: go-food-micro

services:
  rabbitmq:
    env_file: "infra.env"
    image: rabbitmq:4.1.0-management
    container_name: rabbitmq
    pull_policy: if_not_present
    restart: unless-stopped
    ports:
      - ${RABBITMQ_HOST_PORT:-5672}:${RABBITMQ_PORT:-5672}
      - ${RABBITMQ_HOST_API_PORT:-15672}:${RABBITMQ_API_PORT:-15672}
      # volumes:
      #   - rabbitmq:/var/lib/rabbitmq
    networks:
      - go-food-micro

  postgres:
    env_file: "infra.env"
    image: postgres:17-alpine
    pull_policy: if_not_present
    container_name: postgres
    restart: unless-stopped
    ports:
      - ${POSTGRES_HOST_PORT:-15432}:${POSTGRES_PORT:-5432}
    #https://docs.docker.com/compose/environment-variables/env-file/#parameter-expansion
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
    networks:
      - go-food-micro

  # https://developer.redis.com/howtos/quick-start
  # redis-stack is a image with redis modules enabled like JSON module
  redis:
    env_file: "infra.env"
    image: redis/redis-stack:7.4.0-v3
    pull_policy: if_not_present
    restart: unless-stopped
    container_name: redis
    ports:
      - ${REDIS_HOST_PORT:-6379}:${REDIS_PORT:-6379}
    networks:
      - go-food-micro

  mongo:
    env_file: "infra.env"
    image: mongo:8.0.9-noble
    pull_policy: if_not_present
    container_name: mongo
    restart: unless-stopped
    # https://docs.docker.com/compose/environment-variables/env-file/#parameter-expansion
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASS:-admin}
    ports:
      - ${MONGO_HOST_PORT:-37017}:${MONGO_PORT:-27017}
    networks:
      - go-food-micro

  # https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html
  # https://hub.docker.com/_/elasticsearch
  elasticsearch:
    env_file: "infra.env"
    image: elasticsearch:9.0.2
    pull_policy: if_not_present
    container_name: elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-elastic}
    ports:
      - ${ELASTIC_HOST_PORT:-9200}:${ELASTIC_PORT:-9200}
      - ${ELASTIC_HOST_TRANSPORT_PORT:-9300}:${ELASTIC_TRANSPORT_PORT:-9300}
    volumes:
      - type: volume
        source: elasticsearch-volume-data
        target: /usr/share/elasticsearch/data
    networks:
      - go-food-micro
    healthcheck:
      test:
        ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # https://www.elastic.co/guide/en/kibana/current/docker.html
  # https://hub.docker.com/_/kibana
  kibana:
    env_file: "infra.env"
    image: kibana:9.0.2
    pull_policy: if_not_present
    container_name: kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD:-elastic}
      - XPACK_SECURITY_ENABLED=false
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=a7a6311933d3503b89bc2dbc36572c33a6c10925682e591bffcab6911c06786d
    ports:
      - ${KIBANA_HOST_PORT:-5601}:${KIBANA_PORT:-5601}
    volumes:
      - type: volume
        source: kibana-volume-data
        target: /usr/share/kibana/data
    networks:
      - go-food-micro
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # https://docs.kurrent.io/server/v25.0/quick-start/#insecure-single-node
  # https://hub.docker.com/r/kurrentplatform/kurrentdb
  # https://stackoverflow.com/questions/65272764/ports-are-not-available-listen-tcp-0-0-0-0-50070-bind-an-attempt-was-made-to
  # KURRENTDB_MEM_DB=true, it tells the KurrentDB container to use an in-memory database, which means that any data stored in KurrentDB will not be persisted between container restarts. Once the container is stopped or restarted, all data will be lost.
  kurrentdb:
    env_file: "infra.env"
    image: kurrentplatform/kurrentdb:25.0
    pull_policy: if_not_present
    container_name: kurrentdb
    restart: unless-stopped
    environment:
      - KURRENTDB_CLUSTER_SIZE=1
      - KURRENTDB_RUN_PROJECTIONS=All
      - KURRENTDB_START_STANDARD_PROJECTIONS=true
      - KURRENTDB_NODE_PORT=2113
      - KURRENTDB_INSECURE=true
      - KURRENTDB_ENABLE_ATOM_PUB_OVER_HTTP=true
      - KURRENTDB_MEM_DB=true
    ports:
      - 2113:2113
    volumes:
      - type: volume
        source: kurrentdb-volume-data
        target: /var/lib/kurrentdb
      - type: volume
        source: kurrentdb-volume-logs
        target: /var/log/kurrentdb
    networks:
      - go-food-micro

volumes:
  kurrentdb-volume-data:
  kurrentdb-volume-logs:
  elasticsearch-volume-data:
  kibana-volume-data:

networks:
  go-food-micro:
    name: go-food-micro
